
N: namespace = {
    pmr_vec: <T> type == std::vector<T, std::pmr::polymorphic_allocator<T>>;
}

N1: namespace == N;

myclass: type = {
    //  Default to public
    str: type == std::string;

    private str2: type == std::string;
}

N3: namespace == ::std::literals;

myfunc: () = {
    v: N1::pmr_vec<myclass::str> = ("xyzzy", "plugh");

    (v2 := v)
    for v2 do (s)
        std::cout << "(s)$\n";
}

myclass2: <T> type = {
    value: int == 42;
}

main: () = {
    view: type == std::string_view;
    N4: namespace == std::literals;

    myfunc2 :== myfunc;
    myfunc2();
}

myclass5: type == myclass4;

myclass3: @struct type = {
    // Defined inline.
    i0 :== :std::array = (0);
    i1 :== i0;
    i3: _ == i0;
    i7 :== :() = 0;

    // Defined out of line.
    o2: myclass3 == myclass3();
    o4: myclass3 == o2;
    o5: myclass4 == myclass4();
    o6: myclass5 == myclass5();
}

myclass4: @struct type = { }

myclass6: @struct <T: type> type = {
    v: <U> _ requires true == 0;
}
